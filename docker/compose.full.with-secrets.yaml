# R2R Full Stack with Docker Secrets Support
# This version uses Docker secrets for sensitive configuration values
# and supports project-specific configuration overrides.

volumes:
  hatchet_certs:
    name: ${COMPOSE_NETWORK:-}hatchet_certs
  hatchet_config:
    name: ${COMPOSE_NETWORK:-}hatchet_config
  hatchet_api_key:
    name: ${COMPOSE_NETWORK:-}hatchet_api_key
  hatchet_rabbitmq_data:
    name: ${COMPOSE_NETWORK:-}hatchet_rabbitmq_data
  hatchet_rabbitmq_conf:
    name: ${COMPOSE_NETWORK:-}hatchet_rabbitmq_conf
  hatchet_postgres_data:
    name: ${COMPOSE_NETWORK:-}hatchet_postgres_data
  minio_data:
    name: ${COMPOSE_NETWORK:-}minio_data
  postgres_data:
    name: ${COMPOSE_NETWORK:-}postgres_data

# Docker secrets configuration
# secrets:
#   GEMINI_API_KEY:
#     file: ${SECRETS_DIR:-~/secrets}/gemini_api_key
#   GOOGLE_API_KEY:
#     file: ${SECRETS_DIR:-~/secrets}/google_api_key

services:
  postgres:
    image: pgvector/pgvector:pg16
    profiles: [postgres]
    env_file:
      - ${ENV_DIR:-./env}/postgres.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    command: >
      postgres
      -c max_connections=1024
    networks:
      - r2r

  minio:
    image: minio/minio
    profiles: [minio]
    env_file:
      - ${ENV_DIR:-./env}/minio.env
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    command: server /data --console-address ":9001"
    networks:
      - r2r

  hatchet-postgres:
    image: postgres:latest
    env_file:
      - ${ENV_DIR:-./env}/hatchet.env
    volumes:
      - hatchet_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hatchet_user -d hatchet"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - r2r

  hatchet-rabbitmq:
    image: "rabbitmq:3-management"
    hostname: "hatchet-rabbitmq"
    ports:
      - "${HATCHET_RABBITMQ_PORT:-5673}:5672"
      - "${HATCHET_RABBITMQ_MGMT_PORT:-15673}:15672"
    env_file:
      - ${ENV_DIR:-./env}/hatchet.env
    volumes:
      - hatchet_rabbitmq_data:/var/lib/rabbitmq
      - hatchet_rabbitmq_conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - r2r

  hatchet-create-db:
    image: postgres:latest
    command: sh /scripts/create-hatchet-db.sh
    volumes:
      - ./scripts:/scripts
    env_file:
      - ${ENV_DIR:-./env}/hatchet.env
    networks:
      - r2r

  hatchet-migration:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-migrate:v0.53.15
    env_file:
      - ${ENV_DIR:-./env}/hatchet.env
    depends_on:
      hatchet-create-db:
        condition: service_completed_successfully
    networks:
      - r2r

  hatchet-setup-config:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:v0.53.15
    command: /hatchet/hatchet-admin quickstart --skip certs --generated-config-dir /hatchet/config --overwrite=false
    env_file:
      - ${ENV_DIR:-./env}/hatchet.env
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    depends_on:
      hatchet-migration:
        condition: service_completed_successfully
      hatchet-rabbitmq:
        condition: service_healthy
    networks:
      - r2r

  hatchet-engine:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-engine:v0.53.15
    command: /hatchet/hatchet-engine --config /hatchet/config
    restart: on-failure
    depends_on:
      hatchet-setup-config:
        condition: service_completed_successfully
    ports:
      - "${HATCHET_ENGINE_PORT:-7077}:7077"
    env_file:
      - ${ENV_DIR:-./env}/hatchet.env
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8733/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - r2r

  hatchet-dashboard:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-dashboard:v0.53.15
    command: sh ./entrypoint.sh --config /hatchet/config
    restart: on-failure
    depends_on:
      hatchet-setup-config:
        condition: service_completed_successfully
    env_file:
      - ${ENV_DIR:-./env}/hatchet.env
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    ports:
      - "${HATCHET_DASHBOARD_PORT:-7274}:80"
    networks:
      - r2r

  setup-token:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:v0.53.15
    command: sh /scripts/setup-token.sh
    volumes:
      - ./scripts:/scripts
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
      - hatchet_api_key:/hatchet_api_key
    depends_on:
      hatchet-setup-config:
        condition: service_completed_successfully
    networks:
      - r2r

  unstructured:
    image: ragtoriches/unst-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7275/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - r2r

  graph_clustering:
    image: ragtoriches/cluster-prod
    ports:
      - "${GRAPH_CLUSTERING_PORT:-7276}:7276"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7276/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - r2r

  r2r:
    build:
      context: ../py
      dockerfile: Dockerfile
    ports:
      - "${R2R_PORT:-7272}:7272"
    env_file:
      - ${ENV_DIR:-./env}/r2r-full-no-secrets.env  # Non-sensitive environment variables
      - ${SECRET_ENV_DIR:-./env}/api_keys.env  # Sensitive environment variables
    # secrets:
    #   - GEMINI_API_KEY
    #   - default_admin_email
    #   - default_admin_password
    command: sh /scripts/start-r2r.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7272/v3/health"]
      interval: 6s
      timeout: 5s
      retries: 5
    restart: on-failure
    volumes:
      - ${R2R_CONFIG_DIR:-./user_configs}:/app/user_configs
      - ${R2R_CONFIG_DIR:-./user_tools}:/app/user_tools
      - hatchet_api_key:/hatchet_api_key:ro
      - ./scripts:/scripts
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      setup-token:
        condition: service_completed_successfully
      unstructured:
        condition: service_healthy
      graph_clustering:
        condition: service_healthy
    networks:
      - r2r

  r2r-dashboard:
    image: sciphiai/r2r-dashboard:1.0.3
    env_file:
      - ${ENV_DIR:-./env}/r2r-dashboard.env
    ports:
      - "${R2R_DASHBOARD_PORT:-7273}:3000"
    networks:
      - r2r

networks:
  r2r:
    name: ${COMPOSE_NETWORK:-r2r}
    driver: bridge